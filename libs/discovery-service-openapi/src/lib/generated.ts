/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/npus/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search for NPUs
         * @description Search for NPUs based on various criteria
         */
        get: operations["searchNpus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        NpuResponse: {
            /**
             * Format: uuid
             * @description Unique identifier of the NPU
             */
            id: string;
            /**
             * Format: uuid
             * @description ID of the user who created the NPU
             */
            userId: string;
            /** @description Title of the NPU */
            title: string;
            /** @description Detailed description of the NPU */
            description: string;
            /** @description List of product IDs associated with the NPU */
            products: string[];
            images: components["schemas"]["NpuImage"][];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        NpuImage: {
            /** Format: uri */
            url: string;
            isMain: boolean;
        };
        NpuListResponse: {
            pagination: {
                /** @description Total number of ratings */
                total: number;
                /** @description Maximum number of ratings returned */
                limit: number;
                /** @description Number of ratings to skip */
                offset: number;
            };
            data: components["schemas"]["NpuResponse"][];
        };
        ErrorResponse: {
            /** @description HTTP status code */
            statusCode?: number;
            /** @description Error message */
            message?: string;
            /** @description Detailed error messages */
            errors?: string[];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    searchNpus: {
        parameters: {
            query?: {
                /** @description Free text search across title and description */
                q?: string;
                /** @description Filter by product ID */
                productId?: string;
                /** @description Filter by product name */
                productName?: string;
                /** @description Average rating greater than or equal to */
                ratingGte?: number;
                /** @description Sort order */
                sort?: "newest" | "oldest" | "highest-rated" | "lowest-rated" | "query-relevance";
                /** @description Offset for pagination */
                offset?: number;
                /** @description Number of results per page */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NpuListResponse"];
                };
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
