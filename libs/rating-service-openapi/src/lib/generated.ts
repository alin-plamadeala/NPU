/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/ratings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List ratings */
        get: operations["listRatings"];
        put?: never;
        /** Submit a rating for an NPU */
        post: operations["createRating"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ratings/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a rating by ID */
        get: operations["getRatingById"];
        put?: never;
        post?: never;
        /** Delete a rating by ID */
        delete: operations["deleteRating"];
        options?: never;
        head?: never;
        /** Update an existing rating */
        patch: operations["updateRating"];
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        CreateRatingRequest: {
            /**
             * Format: uuid
             * @description ID of the NPU being rated
             */
            npuId: string;
            /** @description Score given to the NPU (1-10 scale) */
            score: number;
            /** @description Free-text feedback from the user */
            comment?: string;
        };
        UpdateRatingRequest: {
            /** @description Updated score (1-10 scale) */
            score?: number;
            /** @description Updated free-text feedback */
            comment?: string;
        };
        RatingResponse: {
            /** @description Unique identifier of the rating */
            id: number;
            /**
             * Format: uuid
             * @description ID of the NPU being rated
             */
            npuId: string;
            /**
             * Format: uuid
             * @description ID of the user who submitted the rating
             */
            userId: string;
            /** @description Score given to the NPU */
            score: number;
            /** @description Free-text feedback */
            comment?: string;
            /**
             * Format: date-time
             * @description Timestamp of when the rating was submitted
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Timestamp of when the rating was last updated
             */
            updatedAt: string;
        };
        ListRatingsResponse: {
            pagination: {
                /** @description Total number of ratings */
                total: number;
                /** @description Maximum number of ratings returned */
                limit: number;
                /** @description Number of ratings to skip */
                offset: number;
            };
            data: components["schemas"]["RatingResponse"][];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    listRatings: {
        parameters: {
            query?: {
                /** @description Maximum number of ratings to return */
                limit?: number;
                /** @description Number of ratings to skip */
                offset?: number;
                /** @description ID of the NPU to filter ratings by */
                npuId?: string;
                /** @description ID of the user to filter ratings by */
                userId?: string;
                /** @description Score to filter ratings by */
                scoreGte?: number;
                /** @description Score to filter ratings by */
                scoreLte?: number;
                /** @description Minimum creation date of the rating */
                createdAtGte?: string;
                /** @description Maximum creation date of the rating */
                createdAtLte?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns all ratings */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RatingResponse"][];
                };
            };
        };
    };
    createRating: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateRatingRequest"];
            };
        };
        responses: {
            /** @description Successfully created a rating */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RatingResponse"];
                };
            };
        };
    };
    getRatingById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the rating details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListRatingsResponse"];
                };
            };
            /** @description Rating not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteRating: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Rating deleted successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Rating not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateRating: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateRatingRequest"];
            };
        };
        responses: {
            /** @description Successfully updated the rating */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RatingResponse"];
                };
            };
            /** @description Rating not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
